{
  "name": "steam-trade",
  "version": "0.2.4",
  "dependencies": {
    "request": ">=2.45.0"
  },
  "gitHead": "475a763413d23f92044fc4eb65e2d2ae8ec3b965",
  "readme": "# Steam trading for Node.js\n\nAllows you to automate Steam trading in Node.js.\n\n# Installation\n\n```\nnpm install git://github.com/seishun/node-steam-trade.git\n```\n\n# Usage\nFirst, instantiate a SteamTrade object:\n\n```js\nvar SteamTrade = require('steam-trade');\nvar steamTrade = new SteamTrade();\n```\n\nBefore you use it, make sure it has the necessary session information. See [`sessionID`](#sessionid) and [setCookie](#setcookiecookie).\n\nUnless specified otherwise, callbacks receive the parsed JSON response from Steam as the first argument (`res` in this example). You can use it for error checking: if something went wrong, `res.success` will be `false` and `res.error` should be a human-readable string. \n\n## Properties\n\n### sessionID\nMust be a valid web session ID. You can either log into steamcommunity.com manually and use the value of the \"sessionid\" cookie, or, if using [node-steam](https://github.com/seishun/node-steam), listen for its ['webSessionID'](https://github.com/seishun/node-steam#websessionid) event.\n\n### themAssets\nAn array of the other party's offered items. The order of items in the array corresponds to their order in the trade window, but empty spaces are not preserved.\n\n### tradePartnerSteamID\nYour trade partner's SteamID if a trade is ongoing or was interrupted (see ['error' event](#error)), otherwise a falsy value.\n\n## Methods\n\n### setCookie(cookie)\nSets a cookie that must be in the \"name=value\" form. SteamTrade needs the \"steamLogin\" and \"sessionid\" cookies to operate. You can either log into steamcommunity.com manually, or, if using node-steam, use its [webLogOn](https://github.com/seishun/node-steam#weblogoncallback) method to get both cookies in the required form.\n\n### loadInventory(appid, contextid, callback)\nLoads your inventory for the given app and context. For example, use 440 and 2 for TF2, or 570 and 2 for Dota 2. The specified inventory must already exist for this account, use [getContexts](#getcontextscallback) if you need to check it at runtime. The first argument to `callback` will be an array of item objects in case of success, otherwise a falsy value. Failure implies that your cookie has expired (see ['error' event](#error)).\n\n### getContexts(callback)\nGets the list of available contexts. The first argument to `callback` will be the `g_rgAppContextData` object extracted from the trading page (its structure can be more easily understood from a look at it rather from a description) in case of success, otherwise a falsy value. Failure implies that your cookie has expired (see ['error' event](#error)).\n\n### open(steamID, [callback])\nInitializes a trade with the specified SteamID. The trade handshake must have completed at this point - in node-steam, listen for a `sessionStarted` event. Don't use any other methods until you've opened a trade. Use `callback` if you want to add some items immediately after opening the trade.\n\n### addItem(item, [callback])\nAdds the specified item from your inventory. If the item is stackable (Spiral Knights crap), it will add the whole available amount. If you want to add a certain amount, modify the item's `amount` property.\n\nReadying won't work if any of your added items' callbacks haven't fired yet. If you are adding multiple items, [async.each](https://github.com/caolan/async#each) or [async.map](https://github.com/caolan/async#map) might be useful.\n\n### addItems(items, [callback])\n**Deprecated: use [addItem](#additemitem-callback) instead.**\n\nAdds the specified items from your inventory. `items` must be an array. `callback` will be called once all the items have been added. It will be provided an array of responses - one for each added item, in the same order.\n\n### removeItem(item, [callback])\nRemoves a single item from the trade.\n\n### ready([callback])\nPresses the big blue \"ready\" button. Again, use the callback if you want to confirm as well.\n\n### unready([callback])\nUnpresses the \"ready\" button.\n\n### confirm([callback])\nPresses the big green \"Make Trade\" button. Will silently fail if either side is not ready.\n\n### cancel([callback])\nCancels the trade. Stops polling if succeeds, so no 'end' event will be emitted.\n\n### chatMsg(msg, [callback])\nSends a trade chat message.\n\n\n## Events\n\n### 'error'\n* `e` - an `Error` object\n\nnode-steam-trade has received a bad response while polling, assumed that your cookie has expired, and stopped polling. A possible cause is that you logged into this account from a browser on another computer.\n\nRefresh your web session (`webLogOn` in node-steam), call `setCookie` with the new cookies, then resume polling by reopening the trade (just call `trade.open(trade.tradePartnerSteamID)` and the existing trade will continue).\n\n### 'end'\n* 'complete', 'empty' (no items on either side), 'cancelled', 'timeout', 'failed' or 'pending' (trade turned into a trade offer)\n* in case of 'complete', a `getItems` function; in case of 'pending', trade offer ID\n\nTrade is closed. If you want to get the list of received items, call `getItems` with a callback. The first argument to the callback will be an array of items in case of success, otherwise a falsy value. Failure implies that your cookie has expired (see ['error' event](#error)).\n\n```js\ntrade.on('end', function(status, getItems) {\n  if (status == 'complete') {\n    getItems(function(items) {\n      console.log(items);\n    });\n  }\n});\n```\n\n### 'offerChanged'\n* `true` if an item was added, `false` if removed\n* the item object\n\nThe [`themAssets` property](#themassets) will be updated on the next tick.\n\n### 'ready'\nThe other side has pressed the big blue \"ready\" button.\n\n### 'unready'\nThe other side has changed their mind.\n\n### 'chatMsg'\nThey said something in the trade chat.\n",
  "readmeFilename": "README.md",
  "description": "Allows you to automate Steam trading in Node.js.",
  "_id": "steam-trade@0.2.4",
  "_shasum": "ee4ee2f112dc954ff252de22c367c8d4959880f0",
  "_from": "git://github.com/seishun/node-steam-trade.git",
  "_resolved": "git://github.com/seishun/node-steam-trade.git#475a763413d23f92044fc4eb65e2d2ae8ec3b965"
}
